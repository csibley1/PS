ipmo activedirectory
function convertFrom-base36 # Source: Mirko Schnellbach, reposted on https://ss64.com/ps/syntax-base36.html
{
    [CmdletBinding()]
    param ([parameter(valuefrompipeline=$true, HelpMessage="Alphadecimal string to convert")][string]$base36Num="")
    $alphabet = "0123456789abcdefghijklmnopqrstuvwxyz"
    $inputarray = $base36Num.tolower().tochararray()
    [array]::reverse($inputarray)
    [long]$decNum=0
    $pos=0

    foreach ($c in $inputarray)
    {
        $decNum += $alphabet.IndexOf($c) * [long][Math]::Pow(36, $pos)
        $pos++
    }
    $decNum
}

function Get-Computerlist
{
# Check if Excel is already running
write-host "Debug 1 - check if Excel is running"
$doNotKill = (get-process excel -erroraction SilentlyContinue).id

# Open the workbook, extract tabs to CSV
write-host "Debug 2 - get computer list path"
$excelFile = (get-item 'C:\Users\csibley\CONTOSO.onmicrosoft.com\IT - Inventory\Computer List.xlsx' | select fullname).fullname
write-host "Debug 3 - get desktop path"
$csvPath = (get-item ~\desktop | select fullname).fullname+'\'
write-host "Debug 4 - start Excel"
$Excel = New-Object -ComObject Excel.Application
write-host "Debug 5 - Excel.visible = false"
$Excel.Visible = $false
write-host "Debug 6 - Excel.displayalerts = false"
$Excel.DisplayAlerts = $false
write-host "Debug 7 - load computer list into Excel"
$wb = $Excel.Workbooks.Open($excelFile)
write-host "Debug 8 - begin extracting worksheets"
foreach ($ws in $wb.Worksheets)
{
    $sname = $ws.name
    $ws.SaveAs("$csvpath$sname.csv", 6)
    $script:csvfile += [System.Collections.ArrayList]@("$csvpath$sname.csv")
}

# Close Excel
write-host "Debug 9 - close Excel"
$Excel.Workbooks.Close()
$Excel.Quit()
(get-process excel).id | foreach-object{if ($_ -ne $doNotKill){$expid = $_}}

# Load CSVs into variables, then clean up
$script:retired = import-csv '~\desktop\retired list.csv'
$script:active = import-csv '~\desktop\computers.csv'
foreach ($csv in $csvfile){remove-item $csv}
stop-process -id $expid
remove-variable -force -name csvfile -scope script
}

Get-Computerlist

#Main menu startup
do 
{
    $host.ui.RawUI.WindowTitle = “IT Toolbox”
    cls
    write-host @"

 __        _____  ____  _  __
 \ \      / / _ \|  _ \| |/ /
  \ \ /\ / / | | | |_) | ' / 
   \ V  V /| |_| |  _ <| . \ 
    \_/\_/  \___/|_| \_\_|\_\
                             
       R  E  L  A  T  E  D         
.....................................

  1. PC Lookup - Computer list
  2. Pw stats
  3. DNS info
  4. PC Lookup - AD
  5. Refresh computer list
  6. Passwords expiring soon
  7. User lookup
  8. Systems below 20H2
  9. Check CAB versions on USB drive
  10. Convert svc tag to express code
  11. Get termed users
  X. Exit
.....................................


"@
    $menu = read-host "Enter menu number"
    switch ($menu)
    {
        1 #### PC Lookup
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - PC Lookup”
            write-host "............. PC Lookup ..............."
            do
            {
                $srch = (read-host "Computer or user name (N to Quit)")+'*'
                if ($srch -eq 'n*' -or $srch -eq '*'){break}
                foreach ($actv in $active)
                {
                    if ($actv.'Computer Name - Orange= Check O365 ID - no UserName' -like $srch -or $actv.'User Name 3-4' -like $srch)
                    {
                        $act = (get-date).ToString()+'  ---ACTIVE---'+'      '+$actv.'Computer Name - Orange= Check O365 ID - no UserName'+'  '+$actv.'Purchase Date'+'  '+$actv.'User Name 3-4'
                        $act | out-file ~\desktop\pclookup.txt -append
                        $act
                    }
                }
                foreach ($retpc in $retired)
                {
                    if ($retpc.'Computer Name' -like $srch -or $retpc.'User Name' -like $srch)
                    {
                        $ret = (get-date).ToString()+'  ***RETIRED**'+'      '+$retpc.'Computer Name'+'  '+$retpc.'Date'+'  '+$retpc.'User Name'
                        $ret | out-file ~\desktop\pclookup.txt -append
                        write-host $ret -ForegroundColor Red
                    }
                }
            }until('')
        }
        2 #### Password stats
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - Password stats”
            write-host "............ PW Stats ................"
            do
            {
                write-host "Search by partial username or last four phone digits. Phone search must begin with *"
                $srch = (read-host "Username (Press Enter to quit)")+'*'
                if ($srch.Length -eq '1'){break}
                $stats = get-aduser -filter {samaccountname -like $srch -or mobile -like $srch -or telephonenumber -like $srch} -properties distinguishedname,samaccountname,title,manager,mobile,telephonenumber,pwdlastset,badpasswordtime,badpwdcount,lockouttime,lastlogontimestamp | select distinguishedname,samaccountname,title,manager,mobile,telephonenumber,@{name ="pwdLastSet";expression={[datetime]::FromFileTime($_.pwdLastSet)}},@{name ="badPasswordTime";expression={[datetime]::FromFileTime($_.badPasswordTime)}},badpwdcount,@{name ="lockoutTime";expression={[datetime]::FromFileTime($_.lockoutTime)}},@{name ="lastlogontimestamp";expression={[datetime]::FromFileTime($_.lastlogontimestamp)}}
                "`n"
                (get-date).DateTime
                foreach ($usrstat in $stats)
                {
                    if ($usrstat -ne $null)
                    {
                        if ($usrstat.distinguishedname -like "*exiting accounts*"){write-host "Terminated" -backgroundcolor Red}
                        $usrstat
                        if ($usrstat.mobile -ne $null)
                        {
                            switch($usrstat.mobile.substring(3,3)){
                            612
                            {
                                write-host "MSP" -ForegroundColor Green
                            }

                            218
                            {
                                write-host "Duluth" -ForegroundColor Green
                            }

                            507
                            {
                                write-host "Rochester" -ForegroundColor Green
                            }
                            default
                            {
                                write-host "ERROR" -ForegroundColor Yellow
                            }
                            }
                        }
                        'PW expires on '+($usrstat.pwdLastSet).adddays(180)+"`n`n"
                        if ($usrstat.lockoutTime -gt (get-date).adddays(-1))
                        {Unlock-ADAccount -Identity $usrstat.samaccountname -confirm}
                    }else{write-host "No user found" -backgroundcolor DarkRed}
                }
            }until('')
        }

        3 #### DNS info
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - DNS info”
            write-host "............. DNS Info ................"
            do
            {
                $srch = (read-host "Computer name (Press Enter to quit)")+'*'
                if ($srch.Length -eq '1'){break}
                Get-DnsServerResourceRecord -zonename "CONTOSO.com" -ComputerName "svr2" | where HostName -like "$srch" | ft
            }until('')
        }

        4 #### Get AD computer & group membership
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - Active Directory PC Lookup”
            write-host ".......... Active Directory PC Lookup ............"
            do
            {
                $srch = (read-host "Computer name")+'*'
                if ($srch.Length -eq 1){break}
                else
                {    
                    $adcom = get-adcomputer -filter {name -like $srch} -properties name,whencreated,lastlogondate,operatingsystem,operatingsystemversion,distinguishedname | select name,whencreated,lastlogondate,operatingsystem,operatingsystemversion,distinguishedname
                    if ($adcom -eq $null)
                    {
                        "Nothing found"
                    }
                    else
                    {
                        $adcom
                        write-host "Groups for "($adcom).name -ForegroundColor Cyan
                        (get-adprincipalgroupmembership ($adcom).distinguishedname).name
                        
                    }
                }
            }until('')
        }


        5 #### Refresh computer list
        {
            $host.ui.RawUI.WindowTitle = “Refreshing...”
            Get-Computerlist
        }
        
        6 ### Get passwords expiring within a week
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - Passwords expiring”
            write-host "............. Passwords expiring soon ................"
            $ous = 'OU=TOSO HQ,DC=CONTOSO,DC=com', 'OU=TOSO North,DC=CONTOSO,DC=com', 'OU=SCSILLC,DC=CONTOSO,DC=com'
            $ous | ForEach-Object {
                Get-ADUser -searchbase $_ -Filter * -Properties PasswordLastSet | ? {$_.PasswordLastSet -lt (Get-Date).AddDays(-174) -and $_.PasswordLastSet -gt (Get-Date).AddDays(-190) } | select -Property Name, PasswordLastSet,@{label="PasswordExpires";Expression={($_.passwordLastSet).adddays(180)}}
                } | sort PasswordExpires | out-string
            read-host "Press Enter to continue..."
        }

        7 ### Look up user if all you have is their first name
        {
            
            $host.ui.RawUI.WindowTitle = “User lookup”
            write-host "............ Full-name user lookup ..........."
            do
            {
                $srch = (read-host "Name")+'*'
                if ($srch.Length -eq 1){break}
                else
                {    
                    $namesearch = get-aduser -filter {name -like $srch} -properties name,samaccountname,distinguishedname,mobile,telephonenumber,passwordlastset | select distinguishedname,samaccountname,mobile,telephonenumber,passwordlastset
                    if ($namesearch -eq $null)
                    {
                        "Nothing found"
                    }
                    else
                    {
                    $namesearch
                    }
                }
            }until('')
        }

        8 ### Check for computers at Windows 20H2 and older
        {
            $host.ui.RawUI.WindowTitle = “IT Toolbox - Check Windows patch level”
            $pcversion = get-adcomputer -filter * -properties name,lastlogondate,operatingsystemversion | select name,lastlogondate,operatingsystemversion | sort operatingsystemversion
            $pcfilter = $pcversion | ? {$_.operatingsystemversion -le "10.0 (19042)" -and $_.name -notlike "SVR*" -and $_.name -notlike "XAMain*" -and $_.name -notlike "XATemp*" -and $_.lastlogondate -ne $null -and ((get-date)-$_.lastlogondate).days -ge 0}
            $pcfilter | ForEach-Object{
            foreach ($actv in $active)
            {
                if ($actv.'Computer Name - Orange= Check O365 ID - no UserName' -like $_.name)
                {
                    $actv.'Computer Name - Orange= Check O365 ID - no UserName'+"`t`t"+$_.operatingsystemversion+"`t`t"+$actv.'Purchase Date'+"`t`t"+$actv.'User Name 3-4'
                }
            }
            foreach ($retpc in $retired)
            {
                if ($retpc.'Computer Name' -like $_ -or $retpc.'User Name' -like $_)
                {
                    "***RETIRED*** "+$retpc.'Computer Name'+'`t'+$retpc.'Date'+'`t'+$retpc.'User Name'
                }
            }
            }
                write-host `n
                write-host "1507 (build 10240) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (10240)"}).count -ForegroundColor Cyan
                write-host "1511 (build 10586) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (10586)"}).count -ForegroundColor Cyan
                write-host "1607 (build 14393) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (14393)"}).count -ForegroundColor Cyan
                write-host "1703 (build 15063) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (15063)"}).count -ForegroundColor Cyan
                write-host "1709 (build 16299) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (16299)"}).count -ForegroundColor Cyan
                write-host "1803 (build 17134) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (17134)"}).count -ForegroundColor Cyan
                write-host "1809 (build 17763) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (17763)"}).count -ForegroundColor Cyan
                write-host "1903 (build 18362) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (18362)"}).count -ForegroundColor Cyan
                write-host "1909 (build 18363) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (18363)"}).count -ForegroundColor Cyan
                write-host "2004 (build 19041) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (19041)"}).count -ForegroundColor Cyan
                write-host "20H2 (build 19042) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (19042)"}).count -ForegroundColor Cyan
                #write-host "21H1 (build 19043) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (19042)"}).count -ForegroundColor Cyan
                #write-host "21H2 (build 19044) - " -foregroundcolor White -NoNewline; write-host @($pcfilter | ? {$_.operatingsystemversion -eq "10.0 (19042)"}).count -ForegroundColor Cyan
                write-host `n
                write-host "TOTAL " -foregroundcolor White -nonewline; write-host $pcfilter.count -ForegroundColor Cyan

                read-host "Press Enter to continue..."
        }        

        9 ### Check CAB versions on USB
        {
            $usbHD = gci 'E:\drivers\10'
            foreach ($fldr in $usbHD)
            {
                $cab = gci $fldr.fullname -filter *.cab -Depth 2
                $cab.fullname | out-file ~\desktop\cabVersions.txt -append                
            }
            write-host "Done!"
            sleep 1
        }
        
        10 ### Convert service tag to express svc code
        {
            do
            {
                $text = read-host "Enter tag"
                convertFrom-base36 $text
            }until ($text -eq '')
        }

        11 ### Search termed users
        {
            #$text = read-host "Search (Enter to quit)"
            get-aduser -filter * -searchbase "OU=Exiting Accounts,DC=CONTOSO,DC=com" | select name | sort name | Out-String
            read-host "Press Enter to continue..."
        }
        
        x ### Exit
        {

        }
    }
}until($menu -eq 'x')
